package com.probossgamers.turtlemod.entities.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import org.lwjgl.opengl.GL11;

/**
 * Gamera by LadyHaley
 */
@SideOnly(Side.CLIENT)
public class Gamera extends ModelBase
{
    public ModelRenderer neck;
    public ModelRenderer head;
    public ModelRenderer leftupperleg;
    public ModelRenderer leftlowerleg;
    public ModelRenderer rightupperleg;
    public ModelRenderer rightlowerleg;
    public ModelRenderer rightupperarm;
    public ModelRenderer rightlowerarm;
    public ModelRenderer leftupperarm;
    public ModelRenderer leftlowerarm;
    public ModelRenderer body;
    public ModelRenderer shell1;
    public ModelRenderer shell2;
    public ModelRenderer shell3;
    public ModelRenderer shell4;
    public ModelRenderer uppertail;
    public ModelRenderer lowertail;
    public ModelRenderer jaw;
    public ModelRenderer lefttooth;
    public ModelRenderer righttooth;

    public Gamera()
    {
        this.textureWidth = 128;
        this.textureHeight = 128;

        this.neck = new ModelRenderer(this, 0, 31);
        this.neck.setRotationPoint(0.0F, -13.0F, 0.0F);
        this.neck.addBox(-2.5F, -1.5F, -7.0F, 5, 3, 6);
        this.setRotationAngles(this.neck, -0.4363323129985824F, 0.0F, 0.0F);
        this.head = new ModelRenderer(this, 0, 16);
        this.head.setRotationPoint(0.0F, -16.0F, -5.0F);
        this.head.addBox(-3.5F, -3.5F, -9.0F, 7, 3, 9);
        this.leftupperleg = new ModelRenderer(this, 0, 60);
        this.leftupperleg.setRotationPoint(6.0F, 8.0F, 0.4F);
        this.leftupperleg.addBox(-2.5F, 0.0F, -2.5F, 5, 10, 5);
        this.setRotationAngles(this.leftupperleg, -0.890117918517108F, 0.0F, 0.0F);
        this.leftlowerleg = new ModelRenderer(this, 23, 57);
        this.leftlowerleg.setRotationPoint(6.0F, 8.0F, 0.4F);
        this.leftlowerleg.addBox(-2.5F, 4.0F, -9.5F, 5, 12, 5);
        this.rightupperleg = new ModelRenderer(this, 0, 60);
        this.rightupperleg.setRotationPoint(-6.0F, 8.0F, 0.4F);
        this.rightupperleg.addBox(-2.5F, 0.0F, -2.5F, 5, 10, 5);
        this.setRotationAngles(this.rightupperleg, -0.890117918517108F, 0.0F, 0.0F);
        this.rightlowerleg = new ModelRenderer(this, 23, 57);
        this.rightlowerleg.setRotationPoint(-6.0F, 8.0F, 0.4F);
        this.rightlowerleg.addBox(-2.5F, 4.0F, -9.5F, 5, 12, 5);
        this.rightupperarm = new ModelRenderer(this, 0, 77);
        this.rightupperarm.setRotationPoint(-7.0F, -10.0F, -2.0F);
        this.rightupperarm.addBox(-3.0F, 0.0F, -2.0F, 4, 10, 5);
        this.setRotationAngles(this.rightupperarm, -0.8377580409572781F, 0.0F, 0.8726646259971648F);
        this.rightlowerarm = new ModelRenderer(this, 23, 77);
        this.rightlowerarm.setRotationPoint(-7.0F, -10.0F, -2.0F);
        this.rightlowerarm.addBox(-2.5F, 7.0F, 2.5F, 3, 10, 5);
        this.setRotationAngles(this.rightlowerarm, -1.3962634015954636F, 0.0F, 0.8726646259971648F);
        this.leftupperarm = new ModelRenderer(this, 0, 77);
        this.leftupperarm.setRotationPoint(7.0F, -10.0F, -2.0F);
        this.leftupperarm.addBox(-1.0F, 0.0F, -2.0F, 4, 10, 5);
        this.setRotationAngles(this.leftupperarm, -0.8377580409572781F, 0.0F, -0.8726646259971648F);
        this.leftlowerarm = new ModelRenderer(this, 23, 77);
        this.leftlowerarm.setRotationPoint(7.0F, -10.0F, -2.0F);
        this.leftlowerarm.addBox(-0.5F, 6.0F, 2.2F, 3, 10, 5);
        this.setRotationAngles(this.leftlowerarm, -1.3962634015954636F, 0.0F, -0.8726646259971648F);
        this.body = new ModelRenderer(this, 37, 1);
        this.body.setRotationPoint(1.0F, 12.0F, -1.0F);
        this.body.addBox(-11.0F, -25.0F, 0.0F, 20, 24, 4);
        this.setRotationAngles(this.body, 0.08726646259971647F, 0.0F, 0.0F);
        this.shell1 = new ModelRenderer(this, 56, 49);
        this.shell1.setRotationPoint(-2.0F, 11.0F, 1.0F);
        this.shell1.addBox(-11.0F, -27.0F, 0.0F, 26, 28, 2);
        this.setRotationAngles(this.shell1, 0.08726646259971647F, 0.0F, 0.0F);
        this.shell2 = new ModelRenderer(this, 32, 101);
        this.shell2.setRotationPoint(-0.5F, 12.0F, 3.0F);
        this.shell2.addBox(-11.0F, -27.0F, 0.0F, 23, 25, 2);
        this.setRotationAngles(this.shell2, 0.08726646259971647F, 0.0F, 0.0F);
        this.shell3 = new ModelRenderer(this, 83, 82);
        this.shell3.setRotationPoint(1.0F, 13.0F, 5.0F);
        this.shell3.addBox(-11.0F, -27.0F, 0.0F, 20, 22, 2);
        this.setRotationAngles(this.shell3, 0.08726646259971647F, 0.0F, 0.0F);
        this.shell4 = new ModelRenderer(this, 86, 108);
        this.shell4.setRotationPoint(3.0F, 14.5F, 7.0F);
        this.shell4.addBox(-11.0F, -27.0F, 0.0F, 16, 18, 2);
        this.setRotationAngles(this.shell4, 0.08726646259971647F, 0.0F, 0.0F);
        this.uppertail = new ModelRenderer(this, 89, 10);
        this.uppertail.setRotationPoint(0.0F, 9.5F, 2.0F);
        this.uppertail.addBox(-2.5F, 0.0F, -2.5F, 5, 14, 4);
        this.setRotationAngles(this.uppertail, 0.6108652381980153F, 0.0F, 0.0F);
        this.lowertail = new ModelRenderer(this, 112, 9);
        this.lowertail.setRotationPoint(0.0F, 9.5F, 2.0F);
        this.lowertail.addBox(-2.5F, 6.5F, -12.5F, 5, 14, 3);
        this.setRotationAngles(this.lowertail, 1.5184364492350666F, 0.0F, 0.0F);
        this.jaw = new ModelRenderer(this, 0, 0);
        this.jaw.setRotationPoint(0.0F, -15.0F, -5.0F);
        this.jaw.addBox(-3.5F, -1.0F, -9.0F, 7, 1, 9);
        this.setRotationAngles(this.jaw, 0.3141592653589793F, 0.0F, 0.0F);
        this.lefttooth = new ModelRenderer(this, 44, 9);
        this.lefttooth.setRotationPoint(0.0F, -14.5F, -5.0F);
        this.lefttooth.addBox(-3.0F, -4.5F, -4.0F, 1, 3, 1);
        this.setRotationAngles(this.lefttooth, 0.0F, 0.0F, -0.6108652381980153F);
        this.righttooth = new ModelRenderer(this, 44, 9);
        this.righttooth.setRotationPoint(0.0F, -14.5F, -5.0F);
        this.righttooth.addBox(2.0F, -4.5F, -4.0F, 1, 3, 1);
        this.setRotationAngles(this.righttooth, 0.0F, 0.0F, 0.6108652381980153F);
    }

    @Override
    public void render(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float rotationYaw, float rotationPitch, float scale)
    {
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.neck.offsetX, this.neck.offsetY, this.neck.offsetZ);
        GlStateManager.translate(this.neck.rotationPointX * scale, this.neck.rotationPointY * scale, this.neck.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.neck.offsetX, -this.neck.offsetY, -this.neck.offsetZ);
        GlStateManager.translate(-this.neck.rotationPointX * scale, -this.neck.rotationPointY * scale, -this.neck.rotationPointZ * scale);
        this.neck.render(scale);
        GlStateManager.popMatrix();
        this.head.render(scale);
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.leftupperleg.offsetX, this.leftupperleg.offsetY, this.leftupperleg.offsetZ);
        GlStateManager.translate(this.leftupperleg.rotationPointX * scale, this.leftupperleg.rotationPointY * scale, this.leftupperleg.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.leftupperleg.offsetX, -this.leftupperleg.offsetY, -this.leftupperleg.offsetZ);
        GlStateManager.translate(-this.leftupperleg.rotationPointX * scale, -this.leftupperleg.rotationPointY * scale, -this.leftupperleg.rotationPointZ * scale);
        this.leftupperleg.render(scale);
        GlStateManager.popMatrix();
        this.leftlowerleg.render(scale);
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rightupperleg.offsetX, this.rightupperleg.offsetY, this.rightupperleg.offsetZ);
        GlStateManager.translate(this.rightupperleg.rotationPointX * scale, this.rightupperleg.rotationPointY * scale, this.rightupperleg.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.rightupperleg.offsetX, -this.rightupperleg.offsetY, -this.rightupperleg.offsetZ);
        GlStateManager.translate(-this.rightupperleg.rotationPointX * scale, -this.rightupperleg.rotationPointY * scale, -this.rightupperleg.rotationPointZ * scale);
        this.rightupperleg.render(scale);
        GlStateManager.popMatrix();
        this.rightlowerleg.render(scale);
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rightupperarm.offsetX, this.rightupperarm.offsetY, this.rightupperarm.offsetZ);
        GlStateManager.translate(this.rightupperarm.rotationPointX * scale, this.rightupperarm.rotationPointY * scale, this.rightupperarm.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.rightupperarm.offsetX, -this.rightupperarm.offsetY, -this.rightupperarm.offsetZ);
        GlStateManager.translate(-this.rightupperarm.rotationPointX * scale, -this.rightupperarm.rotationPointY * scale, -this.rightupperarm.rotationPointZ * scale);
        this.rightupperarm.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rightlowerarm.offsetX, this.rightlowerarm.offsetY, this.rightlowerarm.offsetZ);
        GlStateManager.translate(this.rightlowerarm.rotationPointX * scale, this.rightlowerarm.rotationPointY * scale, this.rightlowerarm.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.rightlowerarm.offsetX, -this.rightlowerarm.offsetY, -this.rightlowerarm.offsetZ);
        GlStateManager.translate(-this.rightlowerarm.rotationPointX * scale, -this.rightlowerarm.rotationPointY * scale, -this.rightlowerarm.rotationPointZ * scale);
        this.rightlowerarm.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.leftupperarm.offsetX, this.leftupperarm.offsetY, this.leftupperarm.offsetZ);
        GlStateManager.translate(this.leftupperarm.rotationPointX * scale, this.leftupperarm.rotationPointY * scale, this.leftupperarm.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.leftupperarm.offsetX, -this.leftupperarm.offsetY, -this.leftupperarm.offsetZ);
        GlStateManager.translate(-this.leftupperarm.rotationPointX * scale, -this.leftupperarm.rotationPointY * scale, -this.leftupperarm.rotationPointZ * scale);
        this.leftupperarm.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.leftlowerarm.offsetX, this.leftlowerarm.offsetY, this.leftlowerarm.offsetZ);
        GlStateManager.translate(this.leftlowerarm.rotationPointX * scale, this.leftlowerarm.rotationPointY * scale, this.leftlowerarm.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.leftlowerarm.offsetX, -this.leftlowerarm.offsetY, -this.leftlowerarm.offsetZ);
        GlStateManager.translate(-this.leftlowerarm.rotationPointX * scale, -this.leftlowerarm.rotationPointY * scale, -this.leftlowerarm.rotationPointZ * scale);
        this.leftlowerarm.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.body.offsetX, this.body.offsetY, this.body.offsetZ);
        GlStateManager.translate(this.body.rotationPointX * scale, this.body.rotationPointY * scale, this.body.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.body.offsetX, -this.body.offsetY, -this.body.offsetZ);
        GlStateManager.translate(-this.body.rotationPointX * scale, -this.body.rotationPointY * scale, -this.body.rotationPointZ * scale);
        this.body.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.shell1.offsetX, this.shell1.offsetY, this.shell1.offsetZ);
        GlStateManager.translate(this.shell1.rotationPointX * scale, this.shell1.rotationPointY * scale, this.shell1.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.shell1.offsetX, -this.shell1.offsetY, -this.shell1.offsetZ);
        GlStateManager.translate(-this.shell1.rotationPointX * scale, -this.shell1.rotationPointY * scale, -this.shell1.rotationPointZ * scale);
        this.shell1.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.shell2.offsetX, this.shell2.offsetY, this.shell2.offsetZ);
        GlStateManager.translate(this.shell2.rotationPointX * scale, this.shell2.rotationPointY * scale, this.shell2.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.shell2.offsetX, -this.shell2.offsetY, -this.shell2.offsetZ);
        GlStateManager.translate(-this.shell2.rotationPointX * scale, -this.shell2.rotationPointY * scale, -this.shell2.rotationPointZ * scale);
        this.shell2.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.shell3.offsetX, this.shell3.offsetY, this.shell3.offsetZ);
        GlStateManager.translate(this.shell3.rotationPointX * scale, this.shell3.rotationPointY * scale, this.shell3.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.shell3.offsetX, -this.shell3.offsetY, -this.shell3.offsetZ);
        GlStateManager.translate(-this.shell3.rotationPointX * scale, -this.shell3.rotationPointY * scale, -this.shell3.rotationPointZ * scale);
        this.shell3.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.shell4.offsetX, this.shell4.offsetY, this.shell4.offsetZ);
        GlStateManager.translate(this.shell4.rotationPointX * scale, this.shell4.rotationPointY * scale, this.shell4.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.shell4.offsetX, -this.shell4.offsetY, -this.shell4.offsetZ);
        GlStateManager.translate(-this.shell4.rotationPointX * scale, -this.shell4.rotationPointY * scale, -this.shell4.rotationPointZ * scale);
        this.shell4.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.uppertail.offsetX, this.uppertail.offsetY, this.uppertail.offsetZ);
        GlStateManager.translate(this.uppertail.rotationPointX * scale, this.uppertail.rotationPointY * scale, this.uppertail.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.uppertail.offsetX, -this.uppertail.offsetY, -this.uppertail.offsetZ);
        GlStateManager.translate(-this.uppertail.rotationPointX * scale, -this.uppertail.rotationPointY * scale, -this.uppertail.rotationPointZ * scale);
        this.uppertail.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.lowertail.offsetX, this.lowertail.offsetY, this.lowertail.offsetZ);
        GlStateManager.translate(this.lowertail.rotationPointX * scale, this.lowertail.rotationPointY * scale, this.lowertail.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.lowertail.offsetX, -this.lowertail.offsetY, -this.lowertail.offsetZ);
        GlStateManager.translate(-this.lowertail.rotationPointX * scale, -this.lowertail.rotationPointY * scale, -this.lowertail.rotationPointZ * scale);
        this.lowertail.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.jaw.offsetX, this.jaw.offsetY, this.jaw.offsetZ);
        GlStateManager.translate(this.jaw.rotationPointX * scale, this.jaw.rotationPointY * scale, this.jaw.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.jaw.offsetX, -this.jaw.offsetY, -this.jaw.offsetZ);
        GlStateManager.translate(-this.jaw.rotationPointX * scale, -this.jaw.rotationPointY * scale, -this.jaw.rotationPointZ * scale);
        this.jaw.render(scale);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.lefttooth.offsetX, this.lefttooth.offsetY, this.lefttooth.offsetZ);
        GlStateManager.translate(this.lefttooth.rotationPointX * scale, this.lefttooth.rotationPointY * scale, this.lefttooth.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.lefttooth.offsetX, -this.lefttooth.offsetY, -this.lefttooth.offsetZ);
        GlStateManager.translate(-this.lefttooth.rotationPointX * scale, -this.lefttooth.rotationPointY * scale, -this.lefttooth.rotationPointZ * scale);
        GlStateManager.enableBlend();
        GlStateManager.blendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
        GlStateManager.color(1.0F, 1.0F, 1.0F, 0.0F);
        this.lefttooth.render(scale);
        GlStateManager.disableBlend();
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.righttooth.offsetX, this.righttooth.offsetY, this.righttooth.offsetZ);
        GlStateManager.translate(this.righttooth.rotationPointX * scale, this.righttooth.rotationPointY * scale, this.righttooth.rotationPointZ * scale);
        GlStateManager.scale(1.0F, 1.0F, 1.0F);
        GlStateManager.translate(-this.righttooth.offsetX, -this.righttooth.offsetY, -this.righttooth.offsetZ);
        GlStateManager.translate(-this.righttooth.rotationPointX * scale, -this.righttooth.rotationPointY * scale, -this.righttooth.rotationPointZ * scale);
        GlStateManager.enableBlend();
        GlStateManager.blendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
        GlStateManager.color(1.0F, 1.0F, 1.0F, 0.0F);
        this.righttooth.render(scale);
        GlStateManager.disableBlend();
        GlStateManager.popMatrix();
    }

    public void setRotationAngles(ModelRenderer modelRenderer, float x, float y, float z)
    {
        modelRenderer.rotateAngleX = x;
        modelRenderer.rotateAngleY = y;
        modelRenderer.rotateAngleZ = z;
    }
}
